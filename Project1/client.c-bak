// Client side C/C++ program to demonstrate Socket programming
#include <stdio.h>
#include <sys/socket.h>
#include <stdlib.h>
#include <unistd.h>
#include <netinet/in.h>
#include <string.h>
#include <arpa/inet.h>

#define PORT 60023

int main(int argc, char const *argv[])
{
	int client_socket = 0;
	long valread,connection_status;
	char ip_address[16]={0};
	char action='y';

	while((action == 'y' || action == 'Y') && action != 'n' && action != 'N'){
		struct sockaddr_in serv_addr;

		if ((client_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0)
		{
			fprintf(stderr, "ERROR: Could not Creat Socket\n");
			return 0;
		}

		serv_addr.sin_family = AF_INET;
		serv_addr.sin_port = htons(PORT);

		// Convert IPv4 and IPv6 addresses from text to binary form
		printf("Please designate the socket you wish to connect to (255.255.255.255:80): ");
		scanf(" %s", ip_address);
		int i = inet_pton(AF_INET, ip_address, &serv_addr.sin_addr);
		while(i<=0){
			fprintf(stderr, "ERROR: Invalid address/ Address not supported \n");
			printf("Please designate the socket you wish to connect to (255.255.255.255:80): ");
			scanf(" %s", ip_address);
			i = inet_pton(AF_INET, ip_address, &serv_addr.sin_addr);
		}

		if ((connection_status=connect(client_socket, (struct sockaddr *)&serv_addr, sizeof(serv_addr))) < 0)
		{
			fprintf(stderr, "ERROR: Connection Failed \n");
		}

		while((action == 'y' || action == 'Y') && action != 'n' && action != 'N' && connection_status>=0){
			char filename[1024]={0};
			char request[1024]={0};
			char buffer[1024]={0};

			// Prompt user for file name
			filename[0]='\0';
			printf("File to request \"/FILENAME.EXT\": ");
			scanf(" %s", filename);
			fflush(stdin);

			// Construct HTTP request
			request[0]='\0';
			sprintf(request, "GET %s HTTP/1.1\r\nHost: %s\r\n\r\n", filename, ip_address);
			printf("%s",request);

			// HTTP request
			printf("STATUS: sending HTTP request\n");
			send(client_socket , request , strlen(request) , 0);

			// HTTP response
			printf("STATUS: recieving HTTP response\n");
			do{
				valread = read( client_socket , buffer, 1024);
				printf("%s\n",buffer );
			}while(valread>0);

			if (valread<0)
				fprintf(stderr, "ERROR: could not read data from stream\n");

			do{
				printf("Do you want another file? (y/n)");
				scanf(" %c", &action);
			}while(action!='y' && action!='Y' && action!='n' && action!='N');
		}
		close(client_socket);

		do{
			printf("Do you want to connect to another server? (y/n)");
			scanf(" %c", &action);
		}while(action!='y' && action!='Y' && action!='n' && action!='N');

	}
	return 0;
}
